function [ e_inf, e_s, sigma_i, tau, error, exitflag ] = FitDebyeModel( f, e_r, sigma, varargin )
%FitDebyeModel Fit a Debye model to a list of permittivities
%   Given a vector of complex permittivities and frequencies, fit a
%   Debye model over that frequency range.
%
%   Inputs:
%       1xN float   f       Vector of linear frequencies
%       1xN float   e_r     Relative permittivity at each frequency point
%       1XN float   sigma   Conductivity at each frequency point
%
%   Options:
%       1x5 float   x0      The initial guess for the optimization
%                           default [7, 10, 0.5, 10, 0.01] (Breast)
%       OPTIONS     options An options structure generated by optimset for
%                           specifiying the optimization options
%                           default optimset('TolFun',1e-9,'MaxIter',2000,'MaxFunEvals',2000,'TolCon',1e-7)
%       1x5 float   lb      Lower bound on the solution
%                           default [0,0,0,0,0]
%       1x5 float   ub      Upper bound on the solution
%                           default [100,800,30,10000,1]
%
%   Outputs:
%       float       e_inf   Relative permittivity at high frequencies
%       float       e_s     Relative permittivity at low frequencies
%       float       sigma_i Static ionic conductivity
%       float       tau     Relaxation time
%       float       error   The error in the model
%
%   History:
%       Unknown     Unknown         Created
%       2015.07.02  Bryce Besler    Properly documented, improved readability, usability
%       2015.07.07  Bryce Besler    Added ('Display','off','Algorithm','active-set') to default options to prevent display writing
%
%   Notes:
%       - Original document is located at \\136.159.100.80\tsar\Software\TissueMeasurement\TISSUE MEASUREMENT TOOLBOX\debyefit.m
%       - Based on the criterion of:
%           Lazebnik, Mariya, et al. "A large-scale study of the
%           ultrawideband microwave dielectric properties of normal breast
%           tissue obtained from reduction surgeries." Physics in medicine
%           and biology 52.10 (2007): 2637.
%       - Optimizes using the MATLAB function fmincon

% Parse arguments
defaultOptions  = optimset( 'TolFun',       1e-9,   ...
                            'MaxIter',      5000,   ...
                            'MaxFunEvals',  5000,   ...
                            'TolCon',       1e-7,   ...
                            'Display',      'off',  ...
                            'Algorithm',    'interior-point');

defaultX0       = [10,      30,     1,      1e-10];
defaultLb       = [0,       0,      0,      0];
defaultUb       = [50,      200,    10,     1];

p = inputParser;
addRequired(p,'f',                          @isfloat);
addRequired(p,'e_r',                        @isfloat);
addRequired(p,'sigma',                      @isfloat);
addOptional(p,'x0',         defaultX0,      @isfloat);
addOptional(p,'options',    defaultOptions, @isstruct);
addOptional(p,'lb',         defaultLb,      @(x) and(isfloat(x), length(x) == 4));
addOptional(p,'ub',         defaultUb,      @(x) and(isfloat(x), length(x) == 4));

parse(p, f, e_r, sigma, varargin{:});
f       = p.Results.f;
e_r     = p.Results.e_r;
sigma   = p.Results.sigma;
x0      = p.Results.x0;
options = p.Results.options;
lb      = p.Results.lb;
ub      = p.Results.ub;

% Generate constants and our angular frequency vector
e_0 = 1/(36*pi)*1e-9;
w = 2*pi*f;
% Compute real and imaginary epsilon to 
eps_real = e_r ;
eps_imag = sigma ./ (w  * e_0);
numpoints = length(w);

% Rescale tau into a usable range
x0(4) = x0(4) * 1e12;
lb(4) = lb(4) * 1e12;
ub(4) = ub(4) * 1e12;

% Nested function for optimizing
    function e = debyecriterion(x)
        % Compute Cole-Cole fitting function based on the input parameters
        debyemodel = x(1) + (x(2)-x(1))./(1 + 1j*x(4)/1e12*w) + x(3)./(1j*w*e_0);
        debye_real = real(debyemodel);
        debye_imag = -imag(debyemodel);
        
        % Create the criterion vector by concatenating two parts
        criterionvect = [(eps_real - debye_real)/median(eps_real); (eps_imag - debye_imag)/median(eps_imag)];
        
        % Calculate the value of e, the minimizing criterion
        e = sum(sum(criterionvect.*criterionvect, 2)) / numpoints;
    end

% Optimize
[x,e, exitflag] = fmincon(@debyecriterion,x0,[],[],[],[], lb, ub,[],options);  

% Pull values from vector
x=num2cell(x);
[e_inf, e_s, sigma_i, tau] = deal(x{:});
tau = tau / 1e12;
error = e;
end

